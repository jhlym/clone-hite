{"version":3,"sources":["components/Loading/CenterLoading.js","App.js","serviceWorker.js","redux/common/index.js","api/client.js","redux/modules/sample.js","api/sample.js","redux/modules/index.js","index.js"],"names":["CenterLoading","Dimmer","Loader","DefaultLayout","React","lazy","AuthLayout","NotFound","App","fallback","exact","path","component","Boolean","window","location","hostname","match","type","client","axios","create","sampleSaga","REQUEST_SAMPLE","REQUEST_SAMPLE_SUCCESS","REQUEST_SAMPLE_FAILURE","sampleRequestSaga","createAction","request","SUCCESS","FAILURE","action","call","payload","response","put","data","meta","error","createRequestSaga","get","takeLatest","handleActions","state","value","rootSaga","all","rootReducer","combineReducers","sample","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAYeA,EARO,WACpB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,kBCDAC,EAAgBC,IAAMC,MAAK,kBAAM,uDACjCC,EAAaF,IAAMC,MAAK,kBAAM,iCAC9BE,EAAWH,IAAMC,MAAK,kBAAM,iCAmBnBG,MAjBf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,6CAEF,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWL,IACpC,kBAAC,IAAD,CAAOI,KAAK,QAAQC,UAAWN,IAC/B,kBAAC,IAAD,CAAOK,KAAK,IAAIC,UAAWT,Q,cCRjBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yHCZkCC,E,SCoBzBC,E,OAxBAC,EAAMC,S,WCeJC,G,EFRR,CAH+BJ,EEI0D,wBFHnF,UAAMA,EAAN,YACA,UAAMA,EAAN,a,mBEERK,E,KAAgBC,E,KAAwBC,E,KAKzCC,GAHuBC,YAHN,yBAIMA,YAAaJ,GFD3B,SAA2BL,EAAMU,GAC9C,IAAMC,EAAO,UAAMX,EAAN,YACPY,EAAO,UAAMZ,EAAN,YAEb,iBAAO,WAAUa,GAAV,uEAIc,OAJd,kBAIoBC,YAAKJ,EAASG,EAAOE,SAJzC,OAKH,OADMC,EAJH,gBAKGC,YAAI,CACRjB,KAAMW,EACNI,QAASC,EAASE,KAClBC,KAAMH,IARL,8BAWH,OAXG,mCAWGC,YAAI,CACRjB,KAAMY,EACNG,QAAQ,EAAD,GACPK,OAAO,IAdN,oGEDiBC,CAAkBhB,GCbtB,WACpBJ,EAAOqB,IAAI,WDcN,SAAUlB,IAAV,iEACL,OADK,SACCmB,YAAWlB,EAAgBG,GAD5B,uCAIP,IAIegB,eAAa,mBAhBL,yBAkBD,SAACC,EAAOV,OAFF,cAGvBT,GAAyB,SAACmB,EAAD,OAAmBC,EAAnB,EAAUX,QAAV,sBAAqCU,EAArC,CAA4CC,aAH9C,cAIvBnB,GAAyB,SAACkB,EAAD,OAAmBL,EAAnB,EAAUL,QAAV,sBAAqCU,EAArC,CAA4CL,aAJ9C,GAJP,CACnBM,MAAO,O,WEbQC,GAAV,SAAUA,IAAV,iEAEL,OAFK,SAECC,YAAI,CAACxB,MAFN,uCAKQyB,MAVKC,0BAAgB,CAElCC,WCWIC,EAAiBC,cACjBC,EAAQC,sBAAYN,EAAaO,8BAAoBC,0BAAgBL,KAE3EA,EAAeM,IAAIX,GAEnBY,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINO,SAASC,eAAe,SNqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c2fbbcad.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\n\r\nconst CenterLoading = () => {\r\n  return (\r\n    <Dimmer>\r\n      <Loader>Loading</Loader>\r\n    </Dimmer>\r\n  )\r\n}\r\n\r\nexport default CenterLoading;\r\n","import React, { Suspense } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nimport CenterLoading from './components/Loading/CenterLoading';\r\n\r\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'));\r\nconst AuthLayout = React.lazy(() => import('./layout/AuthLayout'));\r\nconst NotFound = React.lazy(() => import('./pages/NotFound'));\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>HiteJinro</title>\r\n      </Helmet>\r\n      <Suspense fallback={<CenterLoading />}>\r\n        <Switch>\r\n          <Route exact path=\"/404\" component={NotFound} />\r\n          <Route path=\"/auth\" component={AuthLayout} />\r\n          <Route path=\"/\" component={DefaultLayout} />\r\n        </Switch>\r\n      </Suspense>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","/**\r\n * call은 api 호출\r\n * put은 dispatch\r\n */\r\nimport { call, put } from 'redux-saga/effects';\r\n\r\nexport const createRequestActionTypes = type => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function*(action) {\r\n    // 로딩 시작\r\n    // yield put(startLoading(type));\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n        meta: response,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: e,\r\n        error: true,\r\n      });\r\n    } finally {\r\n      // 로딩 끝\r\n      // yield put(finishLoading(type))\r\n    }\r\n  };\r\n}\r\n","import axios from 'axios';\r\n\r\nconst client = axios.create();\r\n\r\n/*\r\n  글로벌 설정 예시:\r\n  \r\n  // API 주소를 다른 곳으로 사용함\r\n  client.defaults.baseURL = 'https://external-api-server.com/' \r\n\r\n  // 헤더 설정\r\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\r\n\r\n  // 인터셉터 설정\r\n  axios.intercepter.response.use(\\\r\n    response => {\r\n      // 요청 성공 시 특정 작업 수행\r\n      return response;\r\n    }, \r\n    error => {\r\n      // 요청 실패 시 특정 작업 수행\r\n      return Promise.reject(error);\r\n    }\r\n  })  \r\n*/\r\n\r\nexport default client;\r\n","// https://redux-actions.js.org/api/createaction\r\n// createAction return obj(type, payload)\r\nimport { createAction, handleActions } from 'redux-actions';\r\n\r\nimport createRequestSaga, { createRequestActionTypes } from '../common';\r\nimport * as sampleAPI from '../../api/sample';\r\n// https://redux-saga.js.org/docs/api/\r\nimport { takeLatest, takeEvery, call, put } from 'redux-saga/effects';\r\n\r\nconst GENERAL_SAMPLE = 'sample/GENERAL_SAMPLE';\r\nconst [REQUEST_SAMPLE, REQUEST_SAMPLE_SUCCESS, REQUEST_SAMPLE_FAILURE] = createRequestActionTypes('sample/REQUEST_SAMPLE');\r\n\r\nexport const sampleGeneral = createAction(GENERAL_SAMPLE);\r\nexport const sampleRequest = createAction(REQUEST_SAMPLE);\r\n\r\nconst sampleRequestSaga = createRequestSaga(REQUEST_SAMPLE, sampleAPI.sample);\r\n\r\nexport function* sampleSaga() {\r\n  yield takeLatest(REQUEST_SAMPLE, sampleRequestSaga);\r\n}\r\n\r\nconst initialState = {\r\n  value: null\r\n}\r\n\r\nexport default handleActions(\r\n  {\r\n    [GENERAL_SAMPLE]: (state, payload) => { },\r\n    [REQUEST_SAMPLE_SUCCESS]: (state, { payload: value }) => ({ ...state, value }),\r\n    [REQUEST_SAMPLE_FAILURE]: (state, { payload: error }) => ({ ...state, error }),\r\n  },\r\n  initialState\r\n)\r\n\r\n","import client from './client';\r\n\r\nexport const sample = () => {\r\n  client.get('url')\r\n}","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport sample, { sampleSaga } from './sample';\r\n\r\nconst rootReducer = combineReducers({\r\n  // property로는 reducer\r\n  sample,\r\n});\r\n\r\nexport function* rootSaga() {\r\n  // 파라미터로 saga function 호출\r\n  yield all([sampleSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './assets/css/style.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n// react router\r\nimport { BrowserRouter } from 'react-router-dom';\r\n// redux\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer, { rootSaga } from './redux/modules';\r\n// util\r\nimport { HelmetProvider } from 'react-helmet-async';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\r\n// parameter에 root saga function\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <HelmetProvider>\r\n        <App />\r\n      </HelmetProvider>\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["components/Loading/CenterLoading.js","App.js","serviceWorker.js","redux/common/index.js","api/client.js","redux/modules/sample.js","api/sample.js","redux/modules/index.js","index.js"],"names":["CenterLoading","Dimmer","Loader","DefaultLayout","React","lazy","AuthLayout","NotFound","App","fallback","exact","path","component","Boolean","window","location","hostname","match","type","client","axios","create","sampleSaga","REQUEST_SAMPLE","REQUEST_SAMPLE_SUCCESS","REQUEST_SAMPLE_FAILURE","sampleRequestSaga","createAction","request","SUCCESS","FAILURE","action","call","payload","response","put","data","meta","error","createRequestSaga","get","takeLatest","handleActions","state","value","rootSaga","all","rootReducer","combineReducers","sample","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAYeA,EARO,WACpB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,kBCDAC,EAAgBC,IAAMC,MAAK,kBAAM,uDACjCC,EAAaF,IAAMC,MAAK,kBAAM,iCAC9BE,EAAWH,IAAMC,MAAK,kBAAM,iCAmBnBG,MAjBf,WACE,OACE,oCACE,kBAAC,IAAD,KACE,6CAEF,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWL,IACpC,kBAAC,IAAD,CAAOI,KAAK,QAAQC,UAAWN,IAC/B,kBAAC,IAAD,CAAOK,KAAK,IAAIC,UAAWT,Q,cCRjBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yHCZkCC,E,SCoBzBC,E,OAxBAC,EAAMC,S,WCeJC,G,EFRR,CAH+BJ,EEI0D,wBFHnF,UAAMA,EAAN,YACA,UAAMA,EAAN,a,mBEERK,E,KAAgBC,E,KAAwBC,E,KAKzCC,GAHuBC,YAHN,yBAIMA,YAAaJ,GFD3B,SAA2BL,EAAMU,GAC9C,IAAMC,EAAO,UAAMX,EAAN,YACPY,EAAO,UAAMZ,EAAN,YAEb,iBAAO,WAAUa,GAAV,uEAIc,OAJd,kBAIoBC,YAAKJ,EAASG,EAAOE,SAJzC,OAKH,OADMC,EAJH,gBAKGC,YAAI,CACRjB,KAAMW,EACNI,QAASC,EAASE,KAClBC,KAAMH,IARL,8BAWH,OAXG,mCAWGC,YAAI,CACRjB,KAAMY,EACNG,QAAQ,EAAD,GACPK,OAAO,IAdN,oGEDiBC,CAAkBhB,GCbtB,WACpBJ,EAAOqB,IAAI,WDcN,SAAUlB,IAAV,iEACL,OADK,SACCmB,YAAWlB,EAAgBG,GAD5B,uCAIP,IAIegB,eAAa,mBAhBL,yBAkBD,SAACC,EAAOV,OAFF,cAGvBT,GAAyB,SAACmB,EAAD,OAAmBC,EAAnB,EAAUX,QAAV,sBAAqCU,EAArC,CAA4CC,aAH9C,cAIvBnB,GAAyB,SAACkB,EAAD,OAAmBL,EAAnB,EAAUL,QAAV,sBAAqCU,EAArC,CAA4CL,aAJ9C,GAJP,CACnBM,MAAO,O,WEbQC,GAAV,SAAUA,IAAV,iEAEL,OAFK,SAECC,YAAI,CAACxB,MAFN,uCAKQyB,MAVKC,0BAAgB,CAElCC,WCWIC,EAAiBC,cACjBC,EAAQC,sBAAYN,EAAaO,8BAAoBC,0BAAgBL,KAE3EA,EAAeM,IAAIX,GAEnBY,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,CAAeO,SAAS,eACtB,kBAAC,IAAD,KACE,kBAAC,EAAD,SAINC,SAASC,eAAe,SNqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.46f09d16.chunk.js","sourcesContent":["import React from 'react'\nimport { Dimmer, Loader } from 'semantic-ui-react'\n\n\nconst CenterLoading = () => {\n  return (\n    <Dimmer>\n      <Loader>Loading</Loader>\n    </Dimmer>\n  )\n}\n\nexport default CenterLoading;\n","import React, { Suspense } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\n\nimport CenterLoading from './components/Loading/CenterLoading';\n\nconst DefaultLayout = React.lazy(() => import('./layout/DefaultLayout'));\nconst AuthLayout = React.lazy(() => import('./layout/AuthLayout'));\nconst NotFound = React.lazy(() => import('./pages/NotFound'));\n\nfunction App() {\n  return (\n    <>\n      <Helmet>\n        <title>HiteJinro</title>\n      </Helmet>\n      <Suspense fallback={<CenterLoading />}>\n        <Switch>\n          <Route exact path=\"/404\" component={NotFound} />\n          <Route path=\"/auth\" component={AuthLayout} />\n          <Route path=\"/\" component={DefaultLayout} />\n        </Switch>\n      </Suspense>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * call은 api 호출\n * put은 dispatch\n */\nimport { call, put } from 'redux-saga/effects';\n\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function*(action) {\n    // 로딩 시작\n    // yield put(startLoading(type));\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    } finally {\n      // 로딩 끝\n      // yield put(finishLoading(type))\n    }\n  };\n}\n","import axios from 'axios';\n\nconst client = axios.create();\n\n/*\n  글로벌 설정 예시:\n  \n  // API 주소를 다른 곳으로 사용함\n  client.defaults.baseURL = 'https://external-api-server.com/' \n\n  // 헤더 설정\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n\n  // 인터셉터 설정\n  axios.intercepter.response.use(\\\n    response => {\n      // 요청 성공 시 특정 작업 수행\n      return response;\n    }, \n    error => {\n      // 요청 실패 시 특정 작업 수행\n      return Promise.reject(error);\n    }\n  })  \n*/\n\nexport default client;\n","// https://redux-actions.js.org/api/createaction\n// createAction return obj(type, payload)\nimport { createAction, handleActions } from 'redux-actions';\n\nimport createRequestSaga, { createRequestActionTypes } from '../common';\nimport * as sampleAPI from '../../api/sample';\n// https://redux-saga.js.org/docs/api/\nimport { takeLatest, takeEvery, call, put } from 'redux-saga/effects';\n\nconst GENERAL_SAMPLE = 'sample/GENERAL_SAMPLE';\nconst [REQUEST_SAMPLE, REQUEST_SAMPLE_SUCCESS, REQUEST_SAMPLE_FAILURE] = createRequestActionTypes('sample/REQUEST_SAMPLE');\n\nexport const sampleGeneral = createAction(GENERAL_SAMPLE);\nexport const sampleRequest = createAction(REQUEST_SAMPLE);\n\nconst sampleRequestSaga = createRequestSaga(REQUEST_SAMPLE, sampleAPI.sample);\n\nexport function* sampleSaga() {\n  yield takeLatest(REQUEST_SAMPLE, sampleRequestSaga);\n}\n\nconst initialState = {\n  value: null\n}\n\nexport default handleActions(\n  {\n    [GENERAL_SAMPLE]: (state, payload) => { },\n    [REQUEST_SAMPLE_SUCCESS]: (state, { payload: value }) => ({ ...state, value }),\n    [REQUEST_SAMPLE_FAILURE]: (state, { payload: error }) => ({ ...state, error }),\n  },\n  initialState\n)\n\n","import client from './client';\n\nexport const sample = () => {\n  client.get('url')\n}","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport sample, { sampleSaga } from './sample';\n\nconst rootReducer = combineReducers({\n  // property로는 reducer\n  sample,\n});\n\nexport function* rootSaga() {\n  // 파라미터로 saga function 호출\n  yield all([sampleSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/css/style.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n// react router\nimport { BrowserRouter } from 'react-router-dom';\n// redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './redux/modules';\n// util\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n// parameter에 root saga function\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename=\"/clone-hite\">\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}